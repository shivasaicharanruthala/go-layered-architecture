// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package store is a generated GoMock package.
package store

import (
	gomock "github.com/golang/mock/gomock"
	model "layeredArchitecture/model"
	reflect "reflect"
)

// MockBrandInterface is a mock of BrandInterface interface
type MockBrandInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBrandInterfaceMockRecorder
}

// MockBrandInterfaceMockRecorder is the mock recorder for MockBrandInterface
type MockBrandInterfaceMockRecorder struct {
	mock *MockBrandInterface
}

// NewMockBrandInterface creates a new mock instance
func NewMockBrandInterface(ctrl *gomock.Controller) *MockBrandInterface {
	mock := &MockBrandInterface{ctrl: ctrl}
	mock.recorder = &MockBrandInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBrandInterface) EXPECT() *MockBrandInterfaceMockRecorder {
	return m.recorder
}

// GetByIdBrand mocks base method
func (m *MockBrandInterface) GetByIdBrand(arg0 int) (*model.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdBrand", arg0)
	ret0, _ := ret[0].(*model.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdBrand indicates an expected call of GetByIdBrand
func (mr *MockBrandInterfaceMockRecorder) GetByIdBrand(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdBrand", reflect.TypeOf((*MockBrandInterface)(nil).GetByIdBrand), arg0)
}

// PostBrand mocks base method
func (m *MockBrandInterface) PostBrand(brand model.Brand) (*model.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostBrand", brand)
	ret0, _ := ret[0].(*model.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostBrand indicates an expected call of PostBrand
func (mr *MockBrandInterfaceMockRecorder) PostBrand(brand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBrand", reflect.TypeOf((*MockBrandInterface)(nil).PostBrand), brand)
}

// CheckBrandExsists mocks base method
func (m *MockBrandInterface) CheckBrandExsists(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBrandExsists", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBrandExsists indicates an expected call of CheckBrandExsists
func (mr *MockBrandInterfaceMockRecorder) CheckBrandExsists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBrandExsists", reflect.TypeOf((*MockBrandInterface)(nil).CheckBrandExsists), arg0)
}

// MockProductsInterface is a mock of ProductsInterface interface
type MockProductsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProductsInterfaceMockRecorder
}

// MockProductsInterfaceMockRecorder is the mock recorder for MockProductsInterface
type MockProductsInterfaceMockRecorder struct {
	mock *MockProductsInterface
}

// NewMockProductsInterface creates a new mock instance
func NewMockProductsInterface(ctrl *gomock.Controller) *MockProductsInterface {
	mock := &MockProductsInterface{ctrl: ctrl}
	mock.recorder = &MockProductsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProductsInterface) EXPECT() *MockProductsInterfaceMockRecorder {
	return m.recorder
}

// GetByIdProducts mocks base method
func (m *MockProductsInterface) GetByIdProducts(arg0 int) (*model.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIdProducts", arg0)
	ret0, _ := ret[0].(*model.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIdProducts indicates an expected call of GetByIdProducts
func (mr *MockProductsInterfaceMockRecorder) GetByIdProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdProducts", reflect.TypeOf((*MockProductsInterface)(nil).GetByIdProducts), arg0)
}

// PostProduct mocks base method
func (m *MockProductsInterface) PostProduct(arg0 model.Products) (*model.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostProduct", arg0)
	ret0, _ := ret[0].(*model.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProduct indicates an expected call of PostProduct
func (mr *MockProductsInterfaceMockRecorder) PostProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProduct", reflect.TypeOf((*MockProductsInterface)(nil).PostProduct), arg0)
}

// DeleteById mocks base method
func (m *MockProductsInterface) DeleteById(arg0 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteById indicates an expected call of DeleteById
func (mr *MockProductsInterfaceMockRecorder) DeleteById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockProductsInterface)(nil).DeleteById), arg0)
}

// UpdateProduct mocks base method
func (m *MockProductsInterface) UpdateProduct(products model.Products) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", products)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct
func (mr *MockProductsInterfaceMockRecorder) UpdateProduct(products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductsInterface)(nil).UpdateProduct), products)
}
