// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package service is a generated GoMock package.
package service

import (
	gomock "github.com/golang/mock/gomock"
	model "layeredArchitecture/model"
	reflect "reflect"
)

// MockServiceInterface is a mock of ServiceInterface interface
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// GetById mocks base method
func (m *MockServiceInterface) GetById(arg0 int) (*model.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(*model.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockServiceInterfaceMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockServiceInterface)(nil).GetById), arg0)
}

// PostProduct mocks base method
func (m *MockServiceInterface) PostProduct(arg0 model.Products) (*model.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostProduct", arg0)
	ret0, _ := ret[0].(*model.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProduct indicates an expected call of PostProduct
func (mr *MockServiceInterfaceMockRecorder) PostProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProduct", reflect.TypeOf((*MockServiceInterface)(nil).PostProduct), arg0)
}

// DeleteProductById mocks base method
func (m *MockServiceInterface) DeleteProductById(arg0 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductById", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProductById indicates an expected call of DeleteProductById
func (mr *MockServiceInterfaceMockRecorder) DeleteProductById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductById", reflect.TypeOf((*MockServiceInterface)(nil).DeleteProductById), arg0)
}

// UpdateProductById mocks base method
func (m *MockServiceInterface) UpdateProductById(products model.Products) (*model.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductById", products)
	ret0, _ := ret[0].(*model.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductById indicates an expected call of UpdateProductById
func (mr *MockServiceInterfaceMockRecorder) UpdateProductById(products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductById", reflect.TypeOf((*MockServiceInterface)(nil).UpdateProductById), products)
}
